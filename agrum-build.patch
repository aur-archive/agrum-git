diff --git a/src/agrum/CN/lrslib/lrsmp.h b/src/agrum/CN/lrslib/lrsmp.h
index ac98e71..d9bf09f 100644
--- a/src/agrum/CN/lrslib/lrsmp.h
+++ b/src/agrum/CN/lrslib/lrsmp.h
@@ -227,4 +227,5 @@ void lrs_default_digits_overflow ();
 void digits_overflow ();
 
 /* end of  lrsmp.h (vertex enumeration using lexicographic reverse search) */
-#endif
\ No newline at end of file
+#endif
+
diff --git a/src/agrum/core/timer.cpp b/src/agrum/core/timer.cpp
index d31b75b..201c39c 100644
--- a/src/agrum/core/timer.cpp
+++ b/src/agrum/core/timer.cpp
@@ -46,7 +46,7 @@ namespace gum {
     GUM_OP_CPY( Timer );
     _start = from._start;
     _pause = from._pause;
-    _sleeping=_sleeping;
+    _sleeping = from._sleeping;
     return *this;
   }
 } /* namespace gum */
diff --git a/src/agrum/multidim/completeProjections4MultiDim.tcc b/src/agrum/multidim/completeProjections4MultiDim.tcc
index 71e414e..c48235d 100644
--- a/src/agrum/multidim/completeProjections4MultiDim.tcc
+++ b/src/agrum/multidim/completeProjections4MultiDim.tcc
@@ -38,7 +38,7 @@
   template<typename GUM_SCALAR>                                           \
   GUM_SCALAR                                                              \
   NAME ( const MultiDimDecorator<GUM_SCALAR>& table,                      \
-         Instantiation* instantiation = 0 ) {                         \
+         Instantiation* instantiation ) {                         \
     const MultiDimImplementation<GUM_SCALAR>* impl = table.content ();    \
     return NAME ( *impl, instantiation );                             \
   } \
diff --git a/src/agrum/multidim/multiDimCombination.h b/src/agrum/multidim/multiDimCombination.h
index 52c740d..c584cc5 100644
--- a/src/agrum/multidim/multiDimCombination.h
+++ b/src/agrum/multidim/multiDimCombination.h
@@ -129,7 +129,7 @@ namespace gum {
     
     /// returns the combination function currently used by the combinator
     virtual TABLE<GUM_SCALAR>* (* combineFunction () )
-      ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) const = 0;
+      ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) = 0;
     
     /** @brief returns a rough estimate of the number of operations that will be
      * performed to compute the combination */
diff --git a/src/agrum/multidim/multiDimCombinationDefault.h b/src/agrum/multidim/multiDimCombinationDefault.h
index b74b637..3d24aa7 100644
--- a/src/agrum/multidim/multiDimCombinationDefault.h
+++ b/src/agrum/multidim/multiDimCombinationDefault.h
@@ -137,7 +137,7 @@ namespace gum {
 
     /// returns the combination function currently used by the combinator
     virtual TABLE<GUM_SCALAR>* (* combineFunction () )
-      ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) const;
+      ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& );
 
      /** @brief returns a rough estimate of the number of operations that will be
      * performed to compute the combination */
diff --git a/src/agrum/multidim/multiDimCombinationDefault.tcc b/src/agrum/multidim/multiDimCombinationDefault.tcc
index 982f455..c06a727 100644
--- a/src/agrum/multidim/multiDimCombinationDefault.tcc
+++ b/src/agrum/multidim/multiDimCombinationDefault.tcc
@@ -86,7 +86,7 @@ namespace gum {
   template< typename GUM_SCALAR, template<typename> class TABLE >
   INLINE TABLE<GUM_SCALAR>*
   ( * MultiDimCombinationDefault<GUM_SCALAR,TABLE>::combineFunction() )
-  ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) const {
+  ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) {
     return _combine;
   }
 
diff --git a/src/agrum/multidim/multiDimCombineAndProject.h b/src/agrum/multidim/multiDimCombineAndProject.h
index 621a0bc..934488a 100644
--- a/src/agrum/multidim/multiDimCombineAndProject.h
+++ b/src/agrum/multidim/multiDimCombineAndProject.h
@@ -83,7 +83,7 @@ namespace gum {
 
     /// returns the current combination function
     virtual TABLE<GUM_SCALAR>* (* combineFunction () )
-      ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) const = 0;
+      ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) = 0;
     
     /// changes the function used for projecting TABLES
     virtual void
@@ -93,7 +93,7 @@ namespace gum {
     
     /// returns the current projection function
     virtual TABLE<GUM_SCALAR>* (* projectFunction () )
-      ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& ) const = 0;
+      ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& ) = 0;
     
      /** @brief returns a rough estimate of the number of operations that will be
      * performed to compute the combination */
diff --git a/src/agrum/multidim/multiDimCombineAndProjectDefault.h b/src/agrum/multidim/multiDimCombineAndProjectDefault.h
index b845576..b1f8411 100644
--- a/src/agrum/multidim/multiDimCombineAndProjectDefault.h
+++ b/src/agrum/multidim/multiDimCombineAndProjectDefault.h
@@ -104,7 +104,7 @@ namespace gum {
     
     /// returns the current combination function
     virtual TABLE<GUM_SCALAR>* (* combineFunction () )
-      ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) const;
+      ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& );
     
     /// changes the function used for projecting TABLES
     virtual void
@@ -120,7 +120,7 @@ namespace gum {
     
     /// returns the current projection function
     virtual TABLE<GUM_SCALAR>* (* projectFunction () )
-      ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& ) const;
+      ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& );
     
     /** @brief returns a rough estimate of the number of operations that will be
      * performed to compute the combination */
diff --git a/src/agrum/multidim/multiDimCombineAndProjectDefault.tcc b/src/agrum/multidim/multiDimCombineAndProjectDefault.tcc
index b9a0c4c..b8308eb 100644
--- a/src/agrum/multidim/multiDimCombineAndProjectDefault.tcc
+++ b/src/agrum/multidim/multiDimCombineAndProjectDefault.tcc
@@ -337,7 +337,7 @@ namespace gum {
   template< typename GUM_SCALAR, template<typename> class TABLE >
   INLINE TABLE<GUM_SCALAR>*
   ( * MultiDimCombineAndProjectDefault<GUM_SCALAR,TABLE>::combineFunction() )
-  ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) const {
+  ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) {
     return __combination->combineFunction();
   }
 
@@ -366,7 +366,7 @@ namespace gum {
   template< typename GUM_SCALAR, template<typename> class TABLE >
   INLINE TABLE<GUM_SCALAR>*
   ( * MultiDimCombineAndProjectDefault<GUM_SCALAR,TABLE>::projectFunction() )
-  ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& ) const {
+  ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& ) {
     return __projection->projectFunction();
   }
 
diff --git a/src/agrum/multidim/multiDimCompleteProjection.h b/src/agrum/multidim/multiDimCompleteProjection.h
index 34b5605..52184e5 100644
--- a/src/agrum/multidim/multiDimCompleteProjection.h
+++ b/src/agrum/multidim/multiDimCompleteProjection.h
@@ -78,7 +78,7 @@ namespace gum {
 
     /// returns the projection function currently used by the projector
     GUM_SCALAR (* projectFunction () )
-    ( const TABLE<GUM_SCALAR>&, Instantiation* ) const;
+    ( const TABLE<GUM_SCALAR>&, Instantiation* );
     
     /// @}
 
diff --git a/src/agrum/multidim/multiDimCompleteProjection.tcc b/src/agrum/multidim/multiDimCompleteProjection.tcc
index fa1048b..8d5eb58 100644
--- a/src/agrum/multidim/multiDimCompleteProjection.tcc
+++ b/src/agrum/multidim/multiDimCompleteProjection.tcc
@@ -91,7 +91,7 @@ namespace gum {
   template< typename GUM_SCALAR, template<typename> class TABLE >
   INLINE GUM_SCALAR
   ( * MultiDimCompleteProjection<GUM_SCALAR,TABLE>::projectFunction() )
-  ( const TABLE<GUM_SCALAR>&, Instantiation* ) const {
+  ( const TABLE<GUM_SCALAR>&, Instantiation* ) {
     return _proj;
   }
 
diff --git a/src/agrum/multidim/multiDimProjection.h b/src/agrum/multidim/multiDimProjection.h
index 1e6f9bd..2d41af9 100644
--- a/src/agrum/multidim/multiDimProjection.h
+++ b/src/agrum/multidim/multiDimProjection.h
@@ -126,7 +126,7 @@ namespace gum {
 
     /// returns the projection function currently used by the projector
     TABLE<GUM_SCALAR>* (* projectFunction () )
-      ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& ) const;
+      ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& );
     
     /** @brief returns a rough estimate of the number of operations that will be
      * performed to compute the projection */
diff --git a/src/agrum/multidim/multiDimProjection.tcc b/src/agrum/multidim/multiDimProjection.tcc
index 8df6001..8cd8d19 100644
--- a/src/agrum/multidim/multiDimProjection.tcc
+++ b/src/agrum/multidim/multiDimProjection.tcc
@@ -109,7 +109,7 @@ namespace gum {
   template< typename GUM_SCALAR, template<typename> class TABLE >
   INLINE TABLE<GUM_SCALAR>*
   ( * MultiDimProjection<GUM_SCALAR,TABLE>::projectFunction() )
-  ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& ) const {
+  ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& ) {
     return _proj;
   }
 
diff --git a/src/agrum/multidim/patterns/DDUtility/o4DDContext.cpp b/src/agrum/multidim/patterns/DDUtility/o4DDContext.cpp
index 5742626..1f7921b 100644
--- a/src/agrum/multidim/patterns/DDUtility/o4DDContext.cpp
+++ b/src/agrum/multidim/patterns/DDUtility/o4DDContext.cpp
@@ -106,4 +106,5 @@ const double O4DDContext::__logPrime[] = {log2 ( 2 ),log2 ( 3 ),log2 ( 5 ),log2
 #ifdef GUM_NO_INLINE
 #include <agrum/multidim/patterns/DDUtility/o4DDContext.inl>
 #endif
-// ============================================================================
\ No newline at end of file
+// ============================================================================
+
diff --git a/src/agrum/multidim/patterns/completeProjectionPattern4MultiDimArray.h b/src/agrum/multidim/patterns/completeProjectionPattern4MultiDimArray.h
index 8204e44..53eaa9a 100644
--- a/src/agrum/multidim/patterns/completeProjectionPattern4MultiDimArray.h
+++ b/src/agrum/multidim/patterns/completeProjectionPattern4MultiDimArray.h
@@ -41,7 +41,7 @@ namespace gum{
   GUM_SCALAR
   GUM_MULTI_DIM_COMPLETE_PROJECTION_NAME
     ( const MultiDimArray<GUM_SCALAR>* table,
-      Instantiation* instantiation = 0 ) {
+      Instantiation* instantiation ) {
 #endif
     
 
@@ -52,7 +52,7 @@ namespace gum{
   GUM_SCALAR*
   GUM_MULTI_DIM_COMPLETE_PROJECTION_POINTER_NAME
     ( const MultiDimArray<GUM_SCALAR*>* table,
-      Instantiation* instantiation = 0 ) {
+      Instantiation* instantiation ) {
 #endif
     
 
@@ -63,7 +63,7 @@ namespace gum{
   GUM_MULTI_DIM_COMPLETE_PROJECTION_NAME_F
     ( const MultiDimArray<GUM_SCALAR>* table,
       GUM_SCALAR (*f) ( const GUM_SCALAR&, const GUM_SCALAR&),
-      Instantiation* instantiation = 0 ) {
+      Instantiation* instantiation ) {
 #endif
 
     
@@ -75,7 +75,7 @@ namespace gum{
   GUM_MULTI_DIM_COMPLETE_PROJECTION_POINTER_NAME_F
     ( const MultiDimArray<GUM_SCALAR*>* table,
       GUM_SCALAR* (*f) ( const GUM_SCALAR const*, const GUM_SCALAR const* ),
-      Instantiation* instantiation = 0 ) {
+      Instantiation* instantiation ) {
 #endif
 
     
@@ -85,7 +85,7 @@ namespace gum{
   GUM_SCALAR
   GUM_MULTI_DIM_COMPLETE_PROJECTION_IMPL2ARRAY_NAME
     ( const MultiDimImplementation<GUM_SCALAR>* ttable,
-      Instantiation* instantiation = 0 ) {
+      Instantiation* instantiation ) {
     const MultiDimArray<GUM_SCALAR>* table =
       reinterpret_cast<const MultiDimArray<GUM_SCALAR>*> (ttable);
 #endif
@@ -98,7 +98,7 @@ namespace gum{
     GUM_SCALAR*
   GUM_MULTI_DIM_COMPLETE_PROJECTION_POINTER_IMPL2ARRAY_NAME
     ( const MultiDimImplementation<GUM_SCALAR*>* ttable,
-      Instantiation* instantiation = 0 ) {
+      Instantiation* instantiation ) {
     const MultiDimArray<GUM_SCALAR*>* table =
       reinterpret_cast<const MultiDimArray<GUM_SCALAR*>*> (ttable);
 #endif
diff --git a/src/agrum/multidim/patterns/completeProjectionPattern4MultiDimImplementation.h b/src/agrum/multidim/patterns/completeProjectionPattern4MultiDimImplementation.h
index 90e60bc..461c66f 100644
--- a/src/agrum/multidim/patterns/completeProjectionPattern4MultiDimImplementation.h
+++ b/src/agrum/multidim/patterns/completeProjectionPattern4MultiDimImplementation.h
@@ -37,7 +37,7 @@ namespace gum{
   GUM_SCALAR
   GUM_MULTI_DIM_COMPLETE_PROJECTION_NAME
   ( const MultiDimImplementation<GUM_SCALAR>& ttable,
-    Instantiation* instantiation = 0 ) {
+    Instantiation* instantiation ) {
 #endif
     
     typename CompleteProjectionRegister4MultiDim<GUM_SCALAR>::CompleteProjectionPtr
diff --git a/src/cmake/openMP.cmake b/src/cmake/openMP.cmake
index 6af2a1e..a677baf 100644
--- a/src/cmake/openMP.cmake
+++ b/src/cmake/openMP.cmake
@@ -1,6 +1,10 @@
 ###
 #to use openMP (pragmas ignored otherwise)
-SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -fopenmp")
-SET(CMAKE_CXX_FLAGS "${CMAKE_C_FXXLAGS} -fopenmp")
-SET(CMAKE_EXE_LINKER_FLAGS -lgomp)
+
+find_package (OpenMP)
+if (OPENMP_FOUND)
+  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g ${OpenMP_C_FLAGS}")
+  SET(CMAKE_CXX_FLAGS "${CMAKE_C_FXXLAGS} ${OpenMP_CXX_FLAGS}")
+  SET(CMAKE_EXE_LINKER_FLAGS -lgomp)
+endif ()
 ###
