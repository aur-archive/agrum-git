diff --git a/src/agrum/BN/generator/abstractBayesNetGenerator.cpp b/src/agrum/BN/generator/abstractBayesNetGenerator.cpp
index 32bfbe8..f118d3c 100644
--- a/src/agrum/BN/generator/abstractBayesNetGenerator.cpp
+++ b/src/agrum/BN/generator/abstractBayesNetGenerator.cpp
@@ -23,4 +23,5 @@
  *
  * @author Christophe GONZALES, Pierre-Henri WUILLEMIN, Lionel Torti and Ariele-Paolo MAESANO
  */
-#include <agrum/BN/generator/abstractBayesNetGenerator.h>
\ No newline at end of file
+#include <agrum/BN/generator/abstractBayesNetGenerator.h>
+
diff --git a/src/agrum/BN/io/BIF/cocoR/Scanner.h b/src/agrum/BN/io/BIF/cocoR/Scanner.h
index e0fe15d..d3d7009 100644
--- a/src/agrum/BN/io/BIF/cocoR/Scanner.h
+++ b/src/agrum/BN/io/BIF/cocoR/Scanner.h
@@ -205,7 +205,7 @@ private:
 	int eofSym;
 	int noSym;
 	int maxT;
-	int charSetSize;
+	//int charSetSize;
 	StartStates start;
 	KeywordMap keywords;
 	int percent;
diff --git a/src/agrum/BN/io/DSL/cocoR/Scanner.h b/src/agrum/BN/io/DSL/cocoR/Scanner.h
index d6a7776..a7e538b 100644
--- a/src/agrum/BN/io/DSL/cocoR/Scanner.h
+++ b/src/agrum/BN/io/DSL/cocoR/Scanner.h
@@ -205,7 +205,7 @@ private:
 	int eofSym;
 	int noSym;
 	int maxT;
-	int charSetSize;
+	//int charSetSize;
 	StartStates start;
 	KeywordMap keywords;
 	int percent;
diff --git a/src/agrum/BN/io/net/cocoR/Scanner.h b/src/agrum/BN/io/net/cocoR/Scanner.h
index 449c651..d613c95 100644
--- a/src/agrum/BN/io/net/cocoR/Scanner.h
+++ b/src/agrum/BN/io/net/cocoR/Scanner.h
@@ -205,7 +205,7 @@ private:
 	int eofSym;
 	int noSym;
 	int maxT;
-	int charSetSize;
+	//int charSetSize;
 	StartStates start;
 	KeywordMap keywords;
 	int percent;
diff --git a/src/agrum/FMDP/io/dat/cocoR/Scanner.h b/src/agrum/FMDP/io/dat/cocoR/Scanner.h
index 6106119..6b29ddd 100644
--- a/src/agrum/FMDP/io/dat/cocoR/Scanner.h
+++ b/src/agrum/FMDP/io/dat/cocoR/Scanner.h
@@ -205,7 +205,7 @@ private:
 	int eofSym;
 	int noSym;
 	int maxT;
-	int charSetSize;
+	//int charSetSize;
 	StartStates start;
 	KeywordMap keywords;
 	int percent;
diff --git a/src/agrum/FMDP/planning/SPUDDPlanning.tcc b/src/agrum/FMDP/planning/SPUDDPlanning.tcc
index be52551..15d02de 100644
--- a/src/agrum/FMDP/planning/SPUDDPlanning.tcc
+++ b/src/agrum/FMDP/planning/SPUDDPlanning.tcc
@@ -1172,4 +1172,5 @@ gum::SPUDDPlanning<GUM_SCALAR>::__differenceOnPolicy( const gum::MultiDimDecisio
 }
 
 #undef GUM_MULTI_DIM_OPERATOR
-#undef GUM_MULTI_DIM_DECISION_DIAGRAM_RECUR_FUNCTION
\ No newline at end of file
+#undef GUM_MULTI_DIM_DECISION_DIAGRAM_RECUR_FUNCTION
+
diff --git a/src/agrum/multidim/completeProjections4MultiDim.tcc b/src/agrum/multidim/completeProjections4MultiDim.tcc
index 71e414e..c48235d 100644
--- a/src/agrum/multidim/completeProjections4MultiDim.tcc
+++ b/src/agrum/multidim/completeProjections4MultiDim.tcc
@@ -38,7 +38,7 @@
   template<typename GUM_SCALAR>                                           \
   GUM_SCALAR                                                              \
   NAME ( const MultiDimDecorator<GUM_SCALAR>& table,                      \
-         Instantiation* instantiation = 0 ) {                         \
+         Instantiation* instantiation ) {                         \
     const MultiDimImplementation<GUM_SCALAR>* impl = table.content ();    \
     return NAME ( *impl, instantiation );                             \
   } \
diff --git a/src/agrum/multidim/multiDimCombination.h b/src/agrum/multidim/multiDimCombination.h
index 52c740d..c584cc5 100644
--- a/src/agrum/multidim/multiDimCombination.h
+++ b/src/agrum/multidim/multiDimCombination.h
@@ -129,7 +129,7 @@ namespace gum {
     
     /// returns the combination function currently used by the combinator
     virtual TABLE<GUM_SCALAR>* (* combineFunction () )
-      ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) const = 0;
+      ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) = 0;
     
     /** @brief returns a rough estimate of the number of operations that will be
      * performed to compute the combination */
diff --git a/src/agrum/multidim/multiDimCombinationDefault.h b/src/agrum/multidim/multiDimCombinationDefault.h
index b74b637..3d24aa7 100644
--- a/src/agrum/multidim/multiDimCombinationDefault.h
+++ b/src/agrum/multidim/multiDimCombinationDefault.h
@@ -137,7 +137,7 @@ namespace gum {
 
     /// returns the combination function currently used by the combinator
     virtual TABLE<GUM_SCALAR>* (* combineFunction () )
-      ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) const;
+      ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& );
 
      /** @brief returns a rough estimate of the number of operations that will be
      * performed to compute the combination */
diff --git a/src/agrum/multidim/multiDimCombinationDefault.tcc b/src/agrum/multidim/multiDimCombinationDefault.tcc
index 982f455..c06a727 100644
--- a/src/agrum/multidim/multiDimCombinationDefault.tcc
+++ b/src/agrum/multidim/multiDimCombinationDefault.tcc
@@ -86,7 +86,7 @@ namespace gum {
   template< typename GUM_SCALAR, template<typename> class TABLE >
   INLINE TABLE<GUM_SCALAR>*
   ( * MultiDimCombinationDefault<GUM_SCALAR,TABLE>::combineFunction() )
-  ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) const {
+  ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) {
     return _combine;
   }
 
diff --git a/src/agrum/multidim/multiDimCombineAndProject.h b/src/agrum/multidim/multiDimCombineAndProject.h
index 621a0bc..934488a 100644
--- a/src/agrum/multidim/multiDimCombineAndProject.h
+++ b/src/agrum/multidim/multiDimCombineAndProject.h
@@ -83,7 +83,7 @@ namespace gum {
 
     /// returns the current combination function
     virtual TABLE<GUM_SCALAR>* (* combineFunction () )
-      ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) const = 0;
+      ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) = 0;
     
     /// changes the function used for projecting TABLES
     virtual void
@@ -93,7 +93,7 @@ namespace gum {
     
     /// returns the current projection function
     virtual TABLE<GUM_SCALAR>* (* projectFunction () )
-      ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& ) const = 0;
+      ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& ) = 0;
     
      /** @brief returns a rough estimate of the number of operations that will be
      * performed to compute the combination */
diff --git a/src/agrum/multidim/multiDimCombineAndProjectDefault.h b/src/agrum/multidim/multiDimCombineAndProjectDefault.h
index b845576..b1f8411 100644
--- a/src/agrum/multidim/multiDimCombineAndProjectDefault.h
+++ b/src/agrum/multidim/multiDimCombineAndProjectDefault.h
@@ -104,7 +104,7 @@ namespace gum {
     
     /// returns the current combination function
     virtual TABLE<GUM_SCALAR>* (* combineFunction () )
-      ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) const;
+      ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& );
     
     /// changes the function used for projecting TABLES
     virtual void
@@ -120,7 +120,7 @@ namespace gum {
     
     /// returns the current projection function
     virtual TABLE<GUM_SCALAR>* (* projectFunction () )
-      ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& ) const;
+      ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& );
     
     /** @brief returns a rough estimate of the number of operations that will be
      * performed to compute the combination */
diff --git a/src/agrum/multidim/multiDimCombineAndProjectDefault.tcc b/src/agrum/multidim/multiDimCombineAndProjectDefault.tcc
index b9a0c4c..b8308eb 100644
--- a/src/agrum/multidim/multiDimCombineAndProjectDefault.tcc
+++ b/src/agrum/multidim/multiDimCombineAndProjectDefault.tcc
@@ -337,7 +337,7 @@ namespace gum {
   template< typename GUM_SCALAR, template<typename> class TABLE >
   INLINE TABLE<GUM_SCALAR>*
   ( * MultiDimCombineAndProjectDefault<GUM_SCALAR,TABLE>::combineFunction() )
-  ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) const {
+  ( const TABLE<GUM_SCALAR>&, const TABLE<GUM_SCALAR>& ) {
     return __combination->combineFunction();
   }
 
@@ -366,7 +366,7 @@ namespace gum {
   template< typename GUM_SCALAR, template<typename> class TABLE >
   INLINE TABLE<GUM_SCALAR>*
   ( * MultiDimCombineAndProjectDefault<GUM_SCALAR,TABLE>::projectFunction() )
-  ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& ) const {
+  ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& ) {
     return __projection->projectFunction();
   }
 
diff --git a/src/agrum/multidim/multiDimCompleteProjection.h b/src/agrum/multidim/multiDimCompleteProjection.h
index 34b5605..52184e5 100644
--- a/src/agrum/multidim/multiDimCompleteProjection.h
+++ b/src/agrum/multidim/multiDimCompleteProjection.h
@@ -78,7 +78,7 @@ namespace gum {
 
     /// returns the projection function currently used by the projector
     GUM_SCALAR (* projectFunction () )
-    ( const TABLE<GUM_SCALAR>&, Instantiation* ) const;
+    ( const TABLE<GUM_SCALAR>&, Instantiation* );
     
     /// @}
 
diff --git a/src/agrum/multidim/multiDimCompleteProjection.tcc b/src/agrum/multidim/multiDimCompleteProjection.tcc
index fa1048b..8d5eb58 100644
--- a/src/agrum/multidim/multiDimCompleteProjection.tcc
+++ b/src/agrum/multidim/multiDimCompleteProjection.tcc
@@ -91,7 +91,7 @@ namespace gum {
   template< typename GUM_SCALAR, template<typename> class TABLE >
   INLINE GUM_SCALAR
   ( * MultiDimCompleteProjection<GUM_SCALAR,TABLE>::projectFunction() )
-  ( const TABLE<GUM_SCALAR>&, Instantiation* ) const {
+  ( const TABLE<GUM_SCALAR>&, Instantiation* ) {
     return _proj;
   }
 
diff --git a/src/agrum/multidim/multiDimProjection.h b/src/agrum/multidim/multiDimProjection.h
index 1e6f9bd..2d41af9 100644
--- a/src/agrum/multidim/multiDimProjection.h
+++ b/src/agrum/multidim/multiDimProjection.h
@@ -126,7 +126,7 @@ namespace gum {
 
     /// returns the projection function currently used by the projector
     TABLE<GUM_SCALAR>* (* projectFunction () )
-      ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& ) const;
+      ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& );
     
     /** @brief returns a rough estimate of the number of operations that will be
      * performed to compute the projection */
diff --git a/src/agrum/multidim/multiDimProjection.tcc b/src/agrum/multidim/multiDimProjection.tcc
index 8df6001..8cd8d19 100644
--- a/src/agrum/multidim/multiDimProjection.tcc
+++ b/src/agrum/multidim/multiDimProjection.tcc
@@ -109,7 +109,7 @@ namespace gum {
   template< typename GUM_SCALAR, template<typename> class TABLE >
   INLINE TABLE<GUM_SCALAR>*
   ( * MultiDimProjection<GUM_SCALAR,TABLE>::projectFunction() )
-  ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& ) const {
+  ( const TABLE<GUM_SCALAR>&, const Set<const DiscreteVariable*>& ) {
     return _proj;
   }
 
diff --git a/src/agrum/multidim/patterns/completeProjectionPattern4MultiDimArray.h b/src/agrum/multidim/patterns/completeProjectionPattern4MultiDimArray.h
index 8204e44..53eaa9a 100644
--- a/src/agrum/multidim/patterns/completeProjectionPattern4MultiDimArray.h
+++ b/src/agrum/multidim/patterns/completeProjectionPattern4MultiDimArray.h
@@ -41,7 +41,7 @@ namespace gum{
   GUM_SCALAR
   GUM_MULTI_DIM_COMPLETE_PROJECTION_NAME
     ( const MultiDimArray<GUM_SCALAR>* table,
-      Instantiation* instantiation = 0 ) {
+      Instantiation* instantiation ) {
 #endif
     
 
@@ -52,7 +52,7 @@ namespace gum{
   GUM_SCALAR*
   GUM_MULTI_DIM_COMPLETE_PROJECTION_POINTER_NAME
     ( const MultiDimArray<GUM_SCALAR*>* table,
-      Instantiation* instantiation = 0 ) {
+      Instantiation* instantiation ) {
 #endif
     
 
@@ -63,7 +63,7 @@ namespace gum{
   GUM_MULTI_DIM_COMPLETE_PROJECTION_NAME_F
     ( const MultiDimArray<GUM_SCALAR>* table,
       GUM_SCALAR (*f) ( const GUM_SCALAR&, const GUM_SCALAR&),
-      Instantiation* instantiation = 0 ) {
+      Instantiation* instantiation ) {
 #endif
 
     
@@ -75,7 +75,7 @@ namespace gum{
   GUM_MULTI_DIM_COMPLETE_PROJECTION_POINTER_NAME_F
     ( const MultiDimArray<GUM_SCALAR*>* table,
       GUM_SCALAR* (*f) ( const GUM_SCALAR const*, const GUM_SCALAR const* ),
-      Instantiation* instantiation = 0 ) {
+      Instantiation* instantiation ) {
 #endif
 
     
@@ -85,7 +85,7 @@ namespace gum{
   GUM_SCALAR
   GUM_MULTI_DIM_COMPLETE_PROJECTION_IMPL2ARRAY_NAME
     ( const MultiDimImplementation<GUM_SCALAR>* ttable,
-      Instantiation* instantiation = 0 ) {
+      Instantiation* instantiation ) {
     const MultiDimArray<GUM_SCALAR>* table =
       reinterpret_cast<const MultiDimArray<GUM_SCALAR>*> (ttable);
 #endif
@@ -98,7 +98,7 @@ namespace gum{
     GUM_SCALAR*
   GUM_MULTI_DIM_COMPLETE_PROJECTION_POINTER_IMPL2ARRAY_NAME
     ( const MultiDimImplementation<GUM_SCALAR*>* ttable,
-      Instantiation* instantiation = 0 ) {
+      Instantiation* instantiation ) {
     const MultiDimArray<GUM_SCALAR*>* table =
       reinterpret_cast<const MultiDimArray<GUM_SCALAR*>*> (ttable);
 #endif
diff --git a/src/agrum/multidim/patterns/completeProjectionPattern4MultiDimImplementation.h b/src/agrum/multidim/patterns/completeProjectionPattern4MultiDimImplementation.h
index 90e60bc..461c66f 100644
--- a/src/agrum/multidim/patterns/completeProjectionPattern4MultiDimImplementation.h
+++ b/src/agrum/multidim/patterns/completeProjectionPattern4MultiDimImplementation.h
@@ -37,7 +37,7 @@ namespace gum{
   GUM_SCALAR
   GUM_MULTI_DIM_COMPLETE_PROJECTION_NAME
   ( const MultiDimImplementation<GUM_SCALAR>& ttable,
-    Instantiation* instantiation = 0 ) {
+    Instantiation* instantiation ) {
 #endif
     
     typename CompleteProjectionRegister4MultiDim<GUM_SCALAR>::CompleteProjectionPtr
diff --git a/src/agrum/prm/skoor/cocoR/Scanner.h b/src/agrum/prm/skoor/cocoR/Scanner.h
index 682de4b..55b4254 100644
--- a/src/agrum/prm/skoor/cocoR/Scanner.h
+++ b/src/agrum/prm/skoor/cocoR/Scanner.h
@@ -206,7 +206,7 @@ private:
 	int eofSym;
 	int noSym;
 	int maxT;
-	int charSetSize;
+	//int charSetSize;
 	StartStates start;
 	KeywordMap keywords;
 	int percent;
diff --git a/src/cmake/CompilOptions.agrum.cmake b/src/cmake/CompilOptions.agrum.cmake
index c7d6dbd..b138417 100644
--- a/src/cmake/CompilOptions.agrum.cmake
+++ b/src/cmake/CompilOptions.agrum.cmake
@@ -27,14 +27,14 @@ set(CMAKE_C_FLAGS_DEBUG "-O0 -pg -g -DGUM_NO_INLINE")
 set(CMAKE_CXX_FLAGS_RELEASE "${AGRUM_OPTIMIZATION} -DNDEBUG ${AGRUM_INLINING_POLICY}")
 set(CMAKE_C_FLAGS_RELEASE "${AGRUM_OPTIMIZATION} -DNDEBUG ${AGRUM_INLINING_POLICY}")
 
-if (${CMAKE_BUILD_TYPE} STREQUAL "DEBUG")
+if ("${CMAKE_BUILD_TYPE}" STREQUAL "DEBUG")
   set(LIBAGRUM "agrum-dbg")
   set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg")
   set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -pg")
   set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -pg")
-else (${CMAKE_BUILD_TYPE} STREQUAL "DEBUG")
+else ()
   set(LIBAGRUM "agrum")
-endif (${CMAKE_BUILD_TYPE} STREQUAL "DEBUG")
+endif ()
 
 if(WIN32)
   set(LIBRARY_OUTPUT_PATH ${AGRUM_BINARY_DIR})
diff --git a/src/cmake/CxxTest.agrum.cmake b/src/cmake/CxxTest.agrum.cmake
index e7ae1a1..84c80b4 100644
--- a/src/cmake/CxxTest.agrum.cmake
+++ b/src/cmake/CxxTest.agrum.cmake
@@ -48,7 +48,13 @@ MACRO(add_agrum_test NAME)
 ENDMACRO(add_agrum_test NAME)
 
 IF(PYTHONINTERP_FOUND)
-  include("testunits/testList.cmake")
+  if ( EXISTS testunits/testList.cmake )
+    include ( testunits/testList.cmake )
+  else ()
+    file( GLOB AGRUM_TESTS
+          RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}/testunits/ 
+          ${CMAKE_CURRENT_SOURCE_DIR}/testunits/*TestSuite.h )
+  endif ()       
   add_agrum_test(test  ${AGRUM_TESTS})
   target_link_libraries(test ${LIBAGRUM})
 ELSE(PYTHONINTERP_FOUND)
